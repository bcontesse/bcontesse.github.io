(()=>{"use strict";class t{constructor(t,e,s,o){this.node=t,this.parent=e,this.g=s,this.f=o}get_node(){return this.node}get_parent(){return this.parent}get_g(){return this.g}get_f(){return this.f}get_shortest_path(){let t=[],e=this;for(var s;null!==e;)s=e.get_node(),t.push(s),e=e.get_parent();return t.reverse()}}class e{constructor(t){this.board=t,this.in_order=[]}solve(){null!=this.board.get_start()&&null!=this.board.get_goal()||console.log("Must have a Start and a Goal. Cannot Solve.");let e=this.board.get_start();this.board.add_to_visited(e);let s=new t(e,null),o=[];var i,n;for(o.push(s);o.length>0;){if(s=o.shift(),i=s.get_node(),this.in_order.push(i),this.board.is_goal(i))return this.board.clear_visited(),s.get_shortest_path();var a=this.board.get_neighbors(i);for(let e of a)this.board.check_visited(e)||(n=new t(e,s),o.push(n),this.board.add_to_visited(e))}return this.board.clear_visited(),[]}get_in_order(){return this.in_order}}class s{constructor(t){this.board=t,this.in_order=[]}solve(){null!=this.board.get_start()&&null!=this.board.get_goal()||console.log("Must have a Start and a Goal. Cannot Solve.");let e=this.board.get_start();this.board.add_to_visited(e);let s=new t(e,null),o=this.solve_helper(s);return this.board.clear_visited(),null!==o?o.get_shortest_path():[]}solve_helper(e){let s=e.get_node();if(this.in_order.push(s),this.board.is_goal(s))return e;var o=this.board.get_neighbors(s);for(let s of o)if(!this.board.check_visited(s)){this.board.add_to_visited(s);let o=new t(s,e),i=this.solve_helper(o);if(null!==i)return i}return null}get_in_order(){return this.in_order}}class o{constructor(t){this.board=t,this.in_order=[]}solve(){null!=this.board.get_start()&&null!=this.board.get_goal()||console.log("Must have a Start and a Goal. Cannot Solve.");let e=this.board.get_start(),s=new t(e,null,1),o=[];var i,n;for(o.push(s);o.length>0;)if(s=this.get_next_node(o),i=s.get_node(),!this.board.check_visited(i)){if(this.board.add_to_visited(i),this.in_order.push(i),this.board.is_goal(i))return this.board.clear_visited(),s.get_shortest_path();var a=this.board.get_neighbors(i);for(let e of a)if(!this.board.check_visited(e)){let i=s.get_g()+e.get_weight();n=new t(e,s,i),o.push(n)}}return this.board.clear_visited(),[]}get_next_node(t){let e=0;void 0===t[0]&&console.log("bug");let s=t[0].get_g();for(let o=0;o<t.length;o++){let i=t[o];i.get_g()<s&&(e=o,s=i.get_g())}return t.splice(e,1)[0]}get_in_order(){return this.in_order}}class i{constructor(t,e){this.type="no-type",this.weight=1,this.pos_x=e,this.pos_y=t,this.id=`${e}-${t}`}reset(){this.type=null,this.weight=1}get_type(){return this.type}get_weight(){return this.weight}get_id(){return this.id}get_position(){return[this.pos_x,this.pos_y]}set_type(t){this.type=t,this.weight=1,"gate-node"==t&&(this.weight=10)}}class n{constructor(t){this.board=t,this.speed=t.speed,this.max_nodes_to_visit=t.visited_in_order.length}timeout(t){let e=this;setTimeout((function(){if(t!==e.max_nodes_to_visit){if(0===t){let t=e.board.get_start().get_id();document.getElementById(t).className="start-node-visited"}else e.change_node(e.board.visited_in_order[t]);e.timeout(t+1)}else e.add_shortest_path(0)}),e.speed)}change_node(t){let e=document.getElementById(t.get_id());"gate-node"===t.get_type()?e.className="gate-node-visited":"goal-node"===t.get_type()?e.className="goal-node-visited":e.className="no-type-visited"}add_shortest_path(t){let e=this;setTimeout((function(){t!==e.board.shortest_path.length?(e.shortest_path_change(e.board.shortest_path[t]),e.add_shortest_path(t+1)):e.board.toggle_buttons()}),50)}shortest_path_change(t){let e=document.getElementById(t.get_id());"gate-node"===t.get_type()?e.className="gate-node-shortest":"goal-node"===t.get_type()?e.className="goal-node-shortest":"start-node"===t.get_type()?e.className="start-node-shortest":e.className="no-type-shortest"}}class a{constructor(t){this.board=t,this.in_order=[],this.max_iterations=t.get_width()**10}solve(){null!=this.board.get_start()&&null!=this.board.get_goal()||console.log("Must have a Start and a Goal. Cannot Solve.");let e=this.board.get_start(),s=this.board.get_goal(),o=new t(e,null,1,1),i=[];i.push(o);let n=0;for(var a,r;i.length>0;)if(o=this.get_next_node(i),a=o.get_node(),!this.board.check_visited(a)){if(this.board.add_to_visited(a),this.in_order.push(a),n++,n>this.max_iterations)return console.log("No Path Exists within Max Iterations."),this.board.clear_visited(),[];if(this.board.is_goal(a))return this.board.clear_visited(),o.get_shortest_path();var d=this.board.get_neighbors(a);for(let e of d)if(!this.board.check_visited(e)){let n=o.get_g()+e.get_weight(),a=this.manhattan_distance(e,s);r=new t(e,o,n,n+a),this.add_to_queue(i,r)}}return this.board.clear_visited(),[]}manhattan_distance(t,e){let[s,o]=t.get_position(),[i,n]=e.get_position();return Math.abs(s-i)+Math.abs(o-n)}add_to_queue(t,e){let s=e.get_node();for(let o of t)if(o.get_node()===s&&o.get_g()<e.get_g())return;t.push(e)}get_next_node(t){let e=0,s=t[0].get_f();for(let o=0;o<t.length;o++){let i=t[o];i.get_f()<s&&(e=o,s=i.get_f())}return t.splice(e,1)[0]}get_in_order(){return this.in_order}}class r{constructor(t){this.board=t,this.in_order=[],this.max_iterations=t.get_width()**10}solve(){null!=this.board.get_start()&&null!=this.board.get_goal()||console.log("Must have a Start and a Goal. Cannot Solve.");let e=this.board.get_start(),s=this.board.get_goal(),o=new t(e,null,1,1),i=[];i.push(o);let n=0;for(var a,r;i.length>0;)if(o=this.get_next_node(i),a=o.get_node(),!this.board.check_visited(a)){if(this.board.add_to_visited(a),this.in_order.push(a),n++,n>this.max_iterations)return console.log("No Path Exists within Max Iterations."),this.board.clear_visited(),[];if(this.board.is_goal(a))return this.board.clear_visited(),o.get_shortest_path();var d=this.board.get_neighbors(a);for(let e of d)if(!this.board.check_visited(e)){let n=o.get_g()+e.get_weight(),a=this.manhattan_distance(e,s);r=new t(e,o,n,a),this.add_to_queue(i,r)}}return this.board.clear_visited(),[]}manhattan_distance(t,e){let[s,o]=t.get_position(),[i,n]=e.get_position();return Math.abs(s-i)+Math.abs(o-n)}add_to_queue(t,e){let s=e.get_node();for(let o of t)if(o.get_node()===s&&o.get_g()<e.get_g())return;t.push(e)}get_next_node(t){let e=0,s=t[0].get_f();for(let o=0;o<t.length;o++){let i=t[o];i.get_f()<s&&(e=o,s=i.get_f())}return t.splice(e,1)[0]}get_in_order(){return this.in_order}}let d=$("#navbarDiv").height(),l=$("#algorithmDescriptor").height(),h=Math.floor(($(document).height()-d-l)/28),_=Math.floor($(document).width()/25);new class{constructor(t,e){this.width=t,this.height=e,this.board_tiles=[],this.start=null,this.goal=null,this.prev_node_type=null,this.use_gate=!1,this.seen=new Set,this.visited_in_order=[],this.mouse_down=!1,this.cur_node_status=null,this.cur_algorithm=null,this.algo_done=!1,this.speed=50,this.buttons_on=!1,this.special_types=["start-node","goal-node","bomb-node"],this.unweighted_algos=["dfs","bfs"]}initialise(){this.create_grid();let t=Math.floor(this.width/3),e=Math.floor(this.height/2);this.set_start(t,e),this.set_goal(2*t,e),this.get_started_button()}get_started_button(){document.getElementById("getStartedButton").onclick=()=>{document.getElementById("tutorial").style.display="none",this.add_event_listeners(),this.toggle_buttons()}}reset_board(){for(let t=0;t<this.height;t++)for(let e=0;e<this.width;e++){let s=this.get_node(e,t),o=s.get_id(),i=document.getElementById(o);s.set_type("no-type"),i.className="no-type"}let t=Math.floor(this.width/3),e=Math.floor(this.height/2);this.set_start(t,e),this.set_goal(2*t,e)}create_grid(){let t="";for(let e=0;e<this.height;e++){let s=[],o=`<tr id="row ${e}">`;for(let t=0;t<this.width;t++){let n=new i(e,t),a=n.get_type(),r=n.get_id();s.push(n),o+=`<td id="${r}" class="${a}"></td>`}this.board_tiles.push(s),t+=`${o}</tr>`}document.getElementById("board").innerHTML=t}add_event_listeners(){document.addEventListener("keydown",(t=>{if("KeyG"===t.code&&!this.unweighted_algos.includes(this.cur_algorithm)){this.use_gate=!this.use_gate;let t=this.use_gate?"selected":"";document.getElementById("gate-instruct").className=t}}));for(let t=0;t<this.height;t++)for(let e=0;e<this.width;e++){let s=this.get_node(e,t),o=s.get_id(),i=document.getElementById(o);i.onmousedown=t=>{t.preventDefault(),this.mouse_down=!0,this.special_types.includes(s.get_type())?this.cur_node_status=s.get_type():this.switch_node(s)},i.onmouseup=()=>{this.mouse_down=!1,null===this.cur_node_status||this.algo_done||(i.className=this.cur_node_status,s.set_type(this.cur_node_status)),this.prev_node_type=null,this.cur_node_status=null},i.onmouseenter=()=>{this.mouse_down&&null!==this.cur_node_status?(this.prev_node_type=s.get_type(),i.className=this.cur_node_status,s.set_type(this.cur_node_status),"start-node"===this.cur_node_status?(this.start=s,this.algo_done&&(this.solve(),this.update_search())):"goal-node"===this.cur_node_status&&(this.goal=s,this.algo_done&&(this.solve(),this.update_search()))):this.mouse_down&&!this.special_types.includes(s.get_type())&&this.switch_node(s)},i.onmouseleave=()=>{this.mouse_down&&null!==this.cur_node_status&&(null!==this.prev_node_type?(s.set_type(this.prev_node_type),i.className=this.prev_node_type):(s.set_type("no-type"),i.className="no-type"))}}}toggle_buttons(){document.getElementById("refreshButton").onclick=()=>{window.location.reload()},this.buttons_on=!this.buttons_on,this.buttons_on?(document.getElementById("startButton").onclick=()=>{this.reset_search(),this.algo_done=!1,null===this.cur_algorithm?document.getElementById("startButton").innerHTML='<button class="btn btn-default navbar-btn" type="button">Pick an Algorithm!</button>':this.solve()&&(this.toggle_buttons(),this.launch_animations())},document.getElementById("startButtonBFS").onclick=()=>{document.getElementById("startButton").innerHTML='<button id="actualStartButton" class="btn btn-default navbar-btn" type="button">Visualize BFS!</button>',this.switch_algo("bfs")},document.getElementById("startButtonDFS").onclick=()=>{document.getElementById("startButton").innerHTML='<button id="actualStartButton" class="btn btn-default navbar-btn" type="button">Visualize DFS!</button>',this.switch_algo("dfs")},document.getElementById("startButtonDijkstra").onclick=()=>{document.getElementById("startButton").innerHTML='<button id="actualStartButton" class="btn btn-default navbar-btn" type="button">Visualize Dijkstra!</button>',this.switch_algo("dijkstra")},document.getElementById("startButtonAstar").onclick=()=>{document.getElementById("startButton").innerHTML='<button id="actualStartButton" class="btn btn-default navbar-btn" type="button">Visualize A-Star!</button>',this.switch_algo("astar")},document.getElementById("startButtonGreedy").onclick=()=>{document.getElementById("startButton").innerHTML='<button id="actualStartButton" class="btn btn-default navbar-btn" type="button">Visualize Greedy BFS!</button>',this.switch_algo("greedy")},document.getElementById("adjustSlow").onclick=()=>{this.speed=200,document.getElementById("adjustSpeed").innerHTML='Speed: Slow<span class="caret"></span>'},document.getElementById("adjustAverage").onclick=()=>{this.speed=50,document.getElementById("adjustSpeed").innerHTML='Speed: Average<span class="caret"></span>'},document.getElementById("adjustFast").onclick=()=>{this.speed=0,document.getElementById("adjustSpeed").innerHTML='Speed: Fast<span class="caret"></span>'},document.getElementById("clearWallsButton").onclick=()=>{this.remove_type("wall-node");let t=["gate-node","gate-node-visited","gate-node-shortest"];for(let e of t)this.remove_type(e)},document.getElementById("clearPathButton").onclick=()=>{this.reset_search()},document.getElementById("clearBoardButton").onclick=()=>{this.reset_board()},document.getElementById("actualStartButton").style.backgroundColor=""):(document.getElementById("startButtonDFS").onclick=null,document.getElementById("startButtonBFS").onclick=null,document.getElementById("startButtonDijkstra").onclick=null,document.getElementById("startButtonAstar").onclick=null,document.getElementById("startButtonGreedy").onclick=null,document.getElementById("clearPathButton").onclick=null,document.getElementById("clearWallsButton").onclick=null,document.getElementById("clearBoardButton").onclick=null,document.getElementById("startButton").onclick=null,document.getElementById("adjustFast").onclick=null,document.getElementById("adjustAverage").onclick=null,document.getElementById("adjustSlow").onclick=null,document.getElementById("actualStartButton").style.backgroundColor="rgb(185, 15, 15)")}launch_animations(){new n(this).timeout(0)}set_start(t,e){let s=this.get_node(t,e),o=s.get_id(),i=document.getElementById(o);s.set_type("start-node"),i.className="start-node",this.start=s}set_goal(t,e){let s=this.get_node(t,e),o=s.get_id(),i=document.getElementById(o);s.set_type("goal-node"),i.className="goal-node",this.goal=s}switch_node(t){let e,s=t.get_id(),o=document.getElementById(s);e=this.use_gate?"gate-node"!==t.get_type()?"gate-node":"no-type":"wall-node"!==t.get_type()?"wall-node":"no-type",o.className=e,t.set_type(e)}remove_type(t){for(let e=0;e<this.height;e++)for(let s=0;s<this.width;s++){let o=this.get_node(s,e);o.get_type()===t&&(o.set_type("no-type"),document.getElementById(o.get_id()).className="no-type")}}reset_search(){for(let t=0;t<this.height;t++)for(let e=0;e<this.width;e++){let s=this.get_node(e,t);document.getElementById(s.get_id()).className=s.get_type()}}update_search(){this.reset_search();for(let t=0;t<this.height;t++)for(let e=0;e<this.width;e++){let s=this.get_node(e,t);this.shortest_path.includes(s)?this.visit_node(s,"shortest"):this.visited_in_order.includes(s)&&this.visit_node(s,"visited")}}switch_algo(t){this.cur_algorithm=t,this.change_descriptor(t),this.reset_search(),this.use_gate=!1,this.algo_done=!1,this.unweighted_algos.includes(t)?(this.remove_type("gate-node"),document.getElementById("gate-instruct").className="turned-off"):document.getElementById("gate-instruct").className=""}change_descriptor(t){document.getElementById("algorithmDescriptor").innerHTML="bfs"===t?"<b>Unweighted</b> and <b>Guarantees</b> the shortest path!":"dfs"===t?"<b>Unweighted</b> and <b>Does Not Guarantee</b> the shortest path!":"dijkstra"===t||"astar"===t?"<b>Weighted</b> and <b>Guarantees</b> the shortest path!":"greedy"===t?"<b>Weighted</b> and <b>Does Not Guarantee</b> the shortest path!":"Pick an algorithm and visualize it!"}visit_node(t,e){let s=t.get_type()+"-"+e;document.getElementById(t.get_id()).className=s}get_node(t,e){return this.board_tiles[e][t]}get_start(){return this.start}get_goal(){return this.goal}get_neighbors(t){let e=[],s=t.get_position(),[o,i]=s,n=[[1,0],[0,1],[-1,0],[0,-1]];for(let t=0;t<n.length;t++){let s=o+n[t][0],a=i+n[t][1];this.valid_position(s,a)&&this.valid_node(s,a)&&e.push(this.get_node(s,a))}return e}valid_position(t,e){return!(t<0||t>=this.width||e<0||e>=this.height)}valid_node(t,e){return"wall-node"!==this.get_node(t,e).get_type()}is_goal(t){return this.goal===t}add_to_visited(t){let e=t.get_id();this.seen.add(e)}check_visited(t){let e=t.get_id();return this.seen.has(e)}clear_visited(){this.seen=new Set}get_width(){return this.width}solve(){var t;if("bfs"===this.cur_algorithm)t=new e(this);else if("dfs"===this.cur_algorithm)t=new s(this);else if("dijkstra"===this.cur_algorithm)t=new o(this);else if("astar"===this.cur_algorithm)t=new a(this);else{if("greedy"!==this.cur_algorithm)return!1;t=new r(this)}let i=t.solve();if(i.length>0){this.change_descriptor(this.cur_algorithm);let e=t.get_in_order();return this.shortest_path=i,this.visited_in_order=e,this.algo_done=!0,!0}return this.reset_search(),this.visited_in_order=[],this.shortest_path=[],document.getElementById("algorithmDescriptor").innerHTML="Current setup <b>CANNOT</b> be solved!",!1}}(_,h).initialise()})();